#!/usr/bin/env python
import sys
import getopt

from stat_dashboard_pipeline import Pipeline


class StatPipeline(Pipeline):
    def __init__(self, **kwargs):
        self.time_window = kwargs.get('time_window', 1)
        super().__init__(**kwargs)

    def run_pipeline(self):
        super().run()

    def initialize_pipeline(self):
        super().initialize()

    def migrate_pipeline(self):
        super().migrate()


def main():
    """
    Run:
    stat_pipeline

    Command Line options:
    --init / -i
        Run a short migration of historical data to temporary
        CSV files for uploading to Socrata via UI

    --migrate / -m
        Run complete historical migration of QScend Requests/Activities

    """
    unix_options = ":mit"
    gnu_options = ["migrate", "init", "time"]
    cmd_args = sys.argv
    arguments = cmd_args[1:]

    try:
        args, vals = getopt.getopt(arguments, unix_options, gnu_options)
    except getopt.error as err:
        # Return to term with an error code
        print(str(err))
        sys.exit(2)

    stat_pipeline = StatPipeline()

    for arg in args:
        if arg[0] in ("-m", "--migrate"):
            stat_pipeline.migrate_pipeline()
            return

        if arg[0] in ("-i", "--init"):
            stat_pipeline.initialize_pipeline()
            return

        if arg[0] in ("-t", "--time"):
            stat_pipeline.time_window = vals[0]

    # Standard run
    stat_pipeline.run_pipeline()
    return


if __name__ == '__main__':
    sys.exit(main())
